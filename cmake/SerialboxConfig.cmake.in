##===------------------------------------------------------------------------------*- CMake -*-===##
##
##                                   S E R I A L B O X
##
## This file is distributed under terms of BSD license. 
## See LICENSE.txt for more information.
##
##===------------------------------------------------------------------------------------------===##

@PACKAGE_INIT@

#===---------------------------------------------------------------------------------------------===
# Serialbox configuration - automatically generated by CMake - START
#===---------------------------------------------------------------------------------------------===
# Major version of SERIALBOX
set(Serialbox_VERSION_MAJOR "@Serialbox_VERSION_MAJOR@")

# Minor version of SERIALBOX
set(Serialbox_VERSION_MINOR "@Serialbox_VERSION_MINOR@")

# Patch version of SERIALBOX
set(Serialbox_VERSION_PATCH "@Serialbox_VERSION_PATCH@")

# SERIALBOX version string
set(Serialbox_VERSION_STRING "@Serialbox_VERSION_MAJOR@.@Serialbox_VERSION_MINOR@.@Serialbox_VERSION_PATCH@")

# Define if OpenSSL is available
set(SERIALBOX_HAS_OPENSSL "@SERIALBOX_USE_OPENSSL@")

# Define if NetCDF is available
set(SERIALBOX_HAS_NETCDF "@SERIALBOX_USE_NETCDF@")

# SERIALBOX was compiled with logging support (requires Boost.Log)
set(SERIALBOX_HAS_LOGGING "@SERIALBOX_LOGGING@")

# Set Boost configuration
set(SERIALBOX_BOOST_LIB_VERSION "@Boost_LIB_VERSION@")
STRING(REGEX REPLACE "_" "." SERIALBOX_BOOST_VERSION ${SERIALBOX_BOOST_LIB_VERSION})
set(SERIALBOX_BOOST_LIBRARY_DIRS "@Boost_LIBRARY_DIRS@")
set(SERIALBOX_BOOST_INCLUDE_DIRS "@Boost_INCLUDE_DIRS@")
set(SERIALBOX_REQUIRED_BOOST_COMPONENTS "@REQUIRED_BOOST_COMPONENTS@")

#===---------------------------------------------------------------------------------------------===
#   Find Serialbox libraries
#====--------------------------------------------------------------------------------------------===

# Import library targets 
include("${CMAKE_CURRENT_LIST_DIR}/SerialboxTargets.cmake")

set(SERIALBOX_HAS_SHARED_LIBRARY FALSE)
if(TARGET Serialbox::SerialboxShared)
  set(SERIALBOX_HAS_SHARED_LIBRARY TRUE)
endif()

set(SERIALBOX_VERSION @Serialbox_VERSION_STRING@)
if(TARGET Serialbox::SerialboxCStatic)
  set(SERIALBOX_HAS_C TRUE)
endif()
if(TARGET Serialbox::SerialboxFortranStatic)
  set(SERIALBOX_HAS_FORTRAN TRUE)
endif()

# Report findings
message(STATUS "Found Serialbox version: ${SERIALBOX_VERSION}")

get_property(_static_lib TARGET Serialbox::SerialboxStatic PROPERTY LOCATION)
message(STATUS "  Static serialbox: ${_static_lib}")

if(SERIALBOX_HAS_SHARED_LIBRARY)
  get_property(_shared_lib TARGET Serialbox::SerialboxShared PROPERTY LOCATION)
  message(STATUS "  Shared serialbox: ${_shared_lib}")
endif()

if(SERIALBOX_HAS_C)
  get_property(_static_lib TARGET Serialbox::SerialboxCStatic PROPERTY LOCATION)
  message(STATUS "  Static serialbox-c: ${_static_lib}")

  if(SERIALBOX_HAS_SHARED_LIBRARY)
    get_property(_shared_lib TARGET Serialbox::SerialboxCShared PROPERTY LOCATION)
    message(STATUS "  Shared serialbox-c: ${_shared_lib}")
  endif()
endif(SERIALBOX_HAS_C)

if(SERIALBOX_HAS_FORTRAN)
  get_property(_static_lib TARGET Serialbox::SerialboxFortranStatic PROPERTY LOCATION)
  message(STATUS "  Static serialbox FORTRAN: ${_static_lib}")
endif(SERIALBOX_HAS_FORTRAN)

#===---------------------------------------------------------------------------------------------===
#   Find external libraries
#====--------------------------------------------------------------------------------------------===
if(NOT(DEFINED SERIALBOX_NO_EXTERNAL_LIBS))

  include(CMakeFindDependencyMacro)
  #
  # Pthreads
  #
  find_dependency(Threads)

  #
  # Boost (Serialbox always uses the shared Boost libraries)
  #
  get_property(SHARED_LIB_SUPPORT GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS)
  if (SHARED_LIB_SUPPORT)
      set(Boost_USE_STATIC_LIBS OFF)
      set(Boost_USE_STATIC_RUNTIME OFF)
      set(Boost_USE_MULTITHREADED ON)
  endif()
  
  set(BOOST_LIBRARYDIR "${SERIALBOX_BOOST_LIBRARY_DIRS}")
  set(BOOST_INCLUDEDIR "${SERIALBOX_BOOST_INCLUDE_DIRS}")
  set(Boost_NO_SYSTEM_PATHS "ON") # Force boost to search locations specified above

  find_package(Boost 
               ${SERIALBOX_BOOST_VERSION} EXACT COMPONENTS ${SERIALBOX_REQUIRED_BOOST_COMPONENTS})
  if(Boost_FOUND)
    list(APPEND SERIALBOX_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
  else()
  
    # Give some diagnostic infos
    set(WARN_STR "Serialbox: Boost (${SERIALBOX_BOOST_VERSION}) NOT found!")
  
    if(DEFINED Boost_LIB_VERSION)
      string(REPLACE "_" "." FOUND_BOOST_VERSION ${Boost_LIB_VERSION})
      list(APPEND WARN_STR " (Found Boost ${FOUND_BOOST_VERSION})")  
    endif()
    
    list(APPEND WARN_STR "\nRequired components:")
    
    foreach(component ${SERIALBOX_REQUIRED_BOOST_COMPONENTS})
      list(APPEND WARN_STR "\n - ${component}")
    endforeach()
    
    message(WARNING ${WARN_STR} "\n")
  endif()
  
  #
  # OpenSSL
  #
  if(SERIALBOX_HAS_OPENSSL)
    find_package(OpenSSL QUIET)
    if(NOT OpenSSL_FOUND)  
      message(WARNING "Serialbox depends on the OpenSSL libraries")
    endif()
  endif()
  
  #
  # NetCDF
  #
  if(SERIALBOX_HAS_NETCDF)
    set(NETCDF_ROOT_ENV $ENV{NETCDF_ROOT})
    if(NETCDF_ROOT_ENV)
      set(NETCDF_ROOT ${NETCDF_ROOT_ENV} CACHE PATH "NetCDF install path.")
    endif()
    
    if(NOT(DEFINED NETCDF_ROOT))
      find_path(NETCDF_ROOT NAMES include/netcdf.h)
    else()
      get_filename_component(_NETCDF_ROOT_ABSOLUTE ${NETCDF_ROOT} ABSOLUTE)
      set(NETCDF_ROOT ${_NETCDF_ROOT_ABSOLUTE} CACHE PATH "NetCDF-4 install path.")
    endif()

    find_library(NETCDF_LIBRARIES NAMES netcdf HINTS ${NETCDF_ROOT}/lib)
    if(NETCDF_LIBRARIES)
      mark_as_advanced(NETCDF_LIBRARIES)
    else()
      message(WARNING 
              "Serialbox depends on the NetCDF-4 libraries. (Try setting NETCDF_ROOT in the env)")
    endif()
  endif()
endif()

#===---------------------------------------------------------------------------------------------===
#   Find pp_ser.py
#====--------------------------------------------------------------------------------------------===
find_file(SERIALBOX_PPSER pp_ser.py @PACKAGE_PYTHON_INSTALL_DIR@/pp_ser)
include(@PACKAGE_CMAKE_INSTALL_DIR@/SerialboxTooling.cmake)

