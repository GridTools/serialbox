##===------------------------------------------------------------------------------*- CMake -*-===##
##
##                                   S E R I A L B O X
##
## This file is distributed under terms of BSD license.
## See LICENSE.txt for more information.
##
##===------------------------------------------------------------------------------------------===##

@PACKAGE_INIT@

#===---------------------------------------------------------------------------------------------===
# Serialbox configuration - automatically generated by CMake - START
#===---------------------------------------------------------------------------------------------===
# Major version of SERIALBOX
set(Serialbox_VERSION_MAJOR "@Serialbox_VERSION_MAJOR@")

# Minor version of SERIALBOX
set(Serialbox_VERSION_MINOR "@Serialbox_VERSION_MINOR@")

# Patch version of SERIALBOX
set(Serialbox_VERSION_PATCH "@Serialbox_VERSION_PATCH@")

# SERIALBOX version string
set(Serialbox_VERSION_STRING "@Serialbox_VERSION_MAJOR@.@Serialbox_VERSION_MINOR@.@Serialbox_VERSION_PATCH@")

# Define if OpenSSL is available
set(SERIALBOX_HAS_OPENSSL "@SERIALBOX_USE_OPENSSL@")

# Define if NetCDF is available
set(SERIALBOX_HAS_NETCDF "@SERIALBOX_USE_NETCDF@")

# SERIALBOX was compiled with logging support (requires Boost.Log)
set(SERIALBOX_HAS_LOGGING "@SERIALBOX_LOGGING@")

# Set Boost configuration
set(SERIALBOX_BOOST_LIB_VERSION "@Boost_LIB_VERSION@")
STRING(REGEX REPLACE "_" "." SERIALBOX_BOOST_VERSION ${SERIALBOX_BOOST_LIB_VERSION})
set(SERIALBOX_BOOST_LIBRARY_DIRS "@Boost_LIBRARY_DIRS@")
set(SERIALBOX_BOOST_INCLUDE_DIRS "@Boost_INCLUDE_DIRS@")
set(SERIALBOX_REQUIRED_BOOST_COMPONENTS "@REQUIRED_BOOST_COMPONENTS@")

#===---------------------------------------------------------------------------------------------===
#   Helper functions used in this file
#====--------------------------------------------------------------------------------------------===

function( serialbox_print_targets )
  #
  # serialbox_print_targets( targets_list )
  #
  #    Print exported and unavailable targets
  #
  message( STATUS "Serialbox exported targets:")
  foreach( target ${ARGV} )
    if( TARGET ${target} )
      message( STATUS "  ${target}" )
    else()
      list( APPEND _unavailable_targets ${target} )
    endif()
  endforeach()
  if( _unavailable_targets )
    message( STATUS "Serialbox unavailable targets:")
    foreach( target ${_unavailable_targets} )
      message( STATUS "  ${target}" )
    endforeach()
  endif()
endfunction()

function( serialbox_alias_targets )
  #
  # serialbox_alias_targets( alias target_shared target_static align )
  #
  #    Creates ALIAS target for given targets. Prefer target_shared if availabe
  #
  set( _alias ${ARGV0} )
  set( _target_shared ${ARGV1} )
  set( _target_static ${ARGV2} )
  set( _align ${ARGV3} )
  string( REPLACE "Serialbox::" "" _target_shared_build "${_target_shared}" )
  string( REPLACE "Serialbox::" "" _target_static_build "${_target_static}" )
  if( TARGET ${_target_shared_build} )
    message( STATUS "  ${_alias} ${_align}--> Serialbox::${_target_shared_build}" )
    if( NOT TARGET ${_alias} )
      add_library( ${_alias} ALIAS ${_target_shared_build} )
    endif()
  elseif( TARGET ${_target_shared} AND CMAKE_VERSION GREATER 3.11 )
    message( STATUS "  ${_alias} ${_align}--> ${_target_shared}" )
    set_target_properties( ${_target_shared} PROPERTIES IMPORTED_GLOBAL TRUE) # required for aliasing imports
    if( NOT TARGET ${_alias} )
      add_library( ${_alias} ALIAS ${_target_shared} )
    endif()
  elseif( TARGET ${_target_static_build} )
    message( STATUS "  ${_alias} ${_align}--> Serialbox::${_target_static_build}" )
    if( NOT TARGET ${_alias} )
      add_library( ${_alias} ALIAS ${_target_static_build} )
    endif()
  elseif( TARGET ${_target_static} AND CMAKE_VERSION GREATER 3.11 )
    message( STATUS "  ${_alias} ${_align}--> ${_target_static}" )
    set_target_properties( ${_target_static} PROPERTIES IMPORTED_GLOBAL TRUE) # required for aliasing imports
    if( NOT TARGET ${_alias} )
      add_library( ${_alias} ALIAS ${_target_static} )
    endif()
  endif()
endfunction()

#===---------------------------------------------------------------------------------------------===
#   Find Serialbox libraries
#====--------------------------------------------------------------------------------------------===

# Import library targets
if( NOT @PROJECT_NAME@_TARGETS_EXPORTED )
  include("${CMAKE_CURRENT_LIST_DIR}/SerialboxTargets.cmake")
  set( ${PROJECT_NAME}_TARGETS_EXPORTED TRUE )
endif()

set(SERIALBOX_HAS_SHARED_LIBRARY FALSE)
if(TARGET Serialbox::SerialboxShared)
  set(SERIALBOX_HAS_SHARED_LIBRARY TRUE)
endif()

set(SERIALBOX_VERSION @Serialbox_VERSION_STRING@)
if(TARGET Serialbox::SerialboxCStatic)
  set(SERIALBOX_HAS_C TRUE)
endif()
if(TARGET Serialbox::SerialboxFortranStatic)
  set(SERIALBOX_HAS_FORTRAN TRUE)
endif()

### Report findings

message(STATUS "Found Serialbox (version: ${SERIALBOX_VERSION}) in ${PACKAGE_PREFIX_DIR}" )

serialbox_print_targets(
  Serialbox::SerialboxCStatic
  Serialbox::SerialboxCShared
  Serialbox::SerialboxFortranStatic
  Serialbox::SerialboxFortranShared
)

### Create ALIAS targets

message( STATUS "Serialbox ALIAS targets:" )
serialbox_alias_targets( Serialbox::Serialbox_C       Serialbox::SerialboxCShared       Serialbox::SerialboxCStatic "      " )
serialbox_alias_targets( Serialbox::Serialbox_Fortran Serialbox::SerialboxFortranShared Serialbox::SerialboxFortranStatic )

#===---------------------------------------------------------------------------------------------===
#   Find external libraries
#====--------------------------------------------------------------------------------------------===
if(NOT(DEFINED SERIALBOX_NO_EXTERNAL_LIBS))
  include(CMakeFindDependencyMacro)
  #
  # Pthreads
  #
  message( STATUS "Serialbox: find_dependency(Threads)" )
  find_dependency(Threads)

  set(BOOST_LIBRARYDIR "${SERIALBOX_BOOST_LIBRARY_DIRS}")
  set(BOOST_INCLUDEDIR "${SERIALBOX_BOOST_INCLUDE_DIRS}")
  set(Boost_NO_SYSTEM_PATHS "ON") # Force boost to search locations specified above

  message( STATUS "Serialbox: find_dependency(Boost ${SERIALBOX_BOOST_VERSION} COMPONENTS ${SERIALBOX_REQUIRED_BOOST_COMPONENTS})")
  find_dependency(Boost
               ${SERIALBOX_BOOST_VERSION} COMPONENTS ${SERIALBOX_REQUIRED_BOOST_COMPONENTS})
  if(Boost_FOUND)
    list(APPEND SERIALBOX_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
  else()
    # Give some diagnostic infos
    set(WARN_STR "Serialbox: Boost (${SERIALBOX_BOOST_VERSION}) NOT found!")

    if(DEFINED Boost_LIB_VERSION)
      string(REPLACE "_" "." FOUND_BOOST_VERSION ${Boost_LIB_VERSION})
      list(APPEND WARN_STR " (Found Boost ${FOUND_BOOST_VERSION})")
    endif()

    list(APPEND WARN_STR "\nRequired components:")

    foreach(component ${SERIALBOX_REQUIRED_BOOST_COMPONENTS})
      list(APPEND WARN_STR "\n - ${component}")
    endforeach()

    message(WARNING ${WARN_STR} "\n")
  endif()

  #
  # OpenSSL
  #
  if(SERIALBOX_HAS_OPENSSL)
    find_package(OpenSSL QUIET)
    if(NOT OpenSSL_FOUND)
      message(WARNING "Serialbox depends on the OpenSSL libraries")
    endif()
  endif()

  #
  # NetCDF
  #
  if(SERIALBOX_HAS_NETCDF)
    set(NETCDF_ROOT_ENV $ENV{NETCDF_ROOT})
    if(NETCDF_ROOT_ENV)
      set(NETCDF_ROOT ${NETCDF_ROOT_ENV} CACHE PATH "NetCDF install path.")
    endif()

    if(NOT(DEFINED NETCDF_ROOT))
      find_path(NETCDF_ROOT NAMES include/netcdf.h)
    else()
      get_filename_component(_NETCDF_ROOT_ABSOLUTE ${NETCDF_ROOT} ABSOLUTE)
      set(NETCDF_ROOT ${_NETCDF_ROOT_ABSOLUTE} CACHE PATH "NetCDF-4 install path.")
    endif()

    find_library(NETCDF_LIBRARIES NAMES netcdf HINTS ${NETCDF_ROOT}/lib)
    if(NETCDF_LIBRARIES)
      mark_as_advanced(NETCDF_LIBRARIES)
    else()
      message(WARNING
              "Serialbox depends on the NetCDF-4 libraries. (Try setting NETCDF_ROOT in the env)")
    endif()
  endif()
endif()

#===---------------------------------------------------------------------------------------------===
#   Find pp_ser.py
#====--------------------------------------------------------------------------------------------===
find_file(SERIALBOX_PPSER pp_ser.py @PACKAGE_PYTHON_INSTALL_DIR@/pp_ser)
include(@PACKAGE_CMAKE_INSTALL_DIR@/SerialboxTooling.cmake)
