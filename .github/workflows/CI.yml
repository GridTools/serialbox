name: CI

on:
  push:
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    container: mrtravis/gridtools:${{ matrix.compiler }}
    strategy:
      matrix:
        compiler: [gcc-7, gcc-8, gcc-9, clang-9]
        build_type: [Debug, Release]
        exclude:
          - compiler: gcc-7
            build_type: Debug
          - compiler: gcc-8
            build_type: Debug
          - compiler: clang-9
            build_type: Debug

    steps:
      - uses: actions/checkout@v1
      - name: Set defaults
        run: |
          export GCC_VERSION=$(echo ${{ matrix.compiler }} | cut -d'-' -f2)
          echo "::set-env name=FC::gfortran-${GCC_VERSION}"
          echo "::set-env name=TEST_FORTRAN::OFF"  # default will be overwritten in the next step
      - name: Enable Fortran
        if: startsWith(matrix.compiler, 'gcc')
        run: echo "::set-env name=TEST_FORTRAN::ON"
      - name: Install python modules
        run: pip3 install --user nose numpy
      - name: Cache pFUnit
        id: cache-pfunit
        uses: actions/cache@v1
        with:
          path: pfunit
          key: ${{ matrix.compiler }}-pfunit
      - name: Install pFUnit
        if: startsWith(matrix.compiler, 'gcc') && steps.cache-pfunit.outputs.cache-hit != 'true'
        env:
          PFUNIT_VERSION: 3.2.9
        run: |
          export PFUNIT_FILE=pFUnit-${PFUNIT_VERSION}.tgz
          export PFUNIT_LINK=https://downloads.sourceforge.net/project/pfunit/Source/${PFUNIT_FILE}
          export PFUNIT_DIR=pFUnit-${PFUNIT_VERSION}
          wget $PFUNIT_LINK
          tar xf $PFUNIT_FILE
          cd $PFUNIT_DIR
          mkdir -p build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/pfunit 
          make -j8 install
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")
      - name: Set ccache environment
        run: |
          echo "::set-env name=CCACHE_MAXSIZE::400M"
          echo "::set-env name=CCACHE_BASEDIR::$GITHUB_WORKSPACE"
          echo "::set-env name=CCACHE_DIR::$GITHUB_WORKSPACE/.ccache"
          echo "::set-env name=CCACHE_COMPRESS::true"
          echo "::set-env name=CCACHE_COMPRESSLEVEL::6"
      - name: ccache cache files
        uses: actions/cache@v1
        with:
          path: .ccache
          key: ${{ matrix.compiler }}-${{ matrix.build_type }}-ccache-${ { steps.ccache_cache_timestamp.outputs.timestamp } }
          restore-keys: |
            ${{ matrix.compiler }}-${{ matrix.build_type }}-ccache-
      - name: Configure
        run: |
          ccache -s
          mkdir build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DPYTHON_EXECUTABLE=`which python3` \
            -DSERIALBOX_TESTING=ON \
            -DSERIALBOX_ENABLE_FORTRAN=${TEST_FORTRAN} \
            -DSERIALBOX_TESTING_FORTRAN=${TEST_FORTRAN} \
            -DSERIALBOX_TESTING_PYTHON=ON \
            -DpFUnit_DIR=${GITHUB_WORKSPACE}/pfunit \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - name: Build
        run: cmake --build build --parallel 2
      - name: Execute tests
        run: cd build && ctest --output-on-failure
