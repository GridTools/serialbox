! TODO Test bullshit
! TODO Test register only

MODULE ser_ftg_cmp_test

  USE iso_c_binding
  USE iso_fortran_env 
  USE pfunit_mod  
  USE m_ser_ftg
  USE m_ser_ftg_cmp
  
  IMPLICIT NONE
  
  PUBLIC
  
  TYPE testt
    INTEGER :: i0 
    REAL(KIND=C_DOUBLE), ALLOCATABLE :: d3(:,:,:) 
  END TYPE testt 
  
  CHARACTER(len=*), PARAMETER :: dir = 'ftgcmpdata'
  CHARACTER(len=*), PARAMETER :: savepoint_name = 'test'
  INTEGER, PARAMETER :: exp_size_scalar(4) = (/ 1, 0, 0, 0 /) 
  INTEGER, PARAMETER :: exp_bounds_scalar(8) = (/ 0, 0, 0, 0, 0, 0, 0, 0 /) 

CONTAINS

   FUNCTION exp_size(var_shape)
      INTEGER :: var_shape(:), exp_size(4)
      exp_size = RESHAPE(var_shape, (/ 4 /), (/ 0, 0, 0, 0 /))
   END FUNCTION exp_size
   
@Before
   SUBROUTINE mySetup()

      CALL ftg_set_savepoint(savepoint_name)
      ignore_bullshit = .TRUE.
      ignore_bullshit_max_dim_size = 999999999
      ignore_bullshit_allow_negative_indices = .TRUE.
      ignore_not_existing = .TRUE.
      
   END SUBROUTINE mySetup
   
@After
   SUBROUTINE myTearDown()

      CALL ftg_destroy_savepoint()
      
   END SUBROUTINE myTearDown
   
@Test
    SUBROUTINE testCompare()
    
    CHARACTER(len=*), PARAMETER :: base_name = 'testCompare'
    
      LOGICAL :: result, result_acc
    
      LOGICAL              :: logical0a, logical0b, logical0d 
      LOGICAL(KIND=C_BOOL) :: boolean1a(-1:2), boolean1b(4), boolean1c(5), boolean1d(4)
      INTEGER              :: integer2a(-2:2,-3:5), integer2b(5,9), integer2c(5,8), integer2d(5,9)  
      INTEGER(KIND=C_LONG) :: longint3a(-4:4,-5:5,-6:9), longint3b(9,11,16), longint3c(8,11,16), longint3d(9,11,16)  
      REAL(KIND=C_FLOAT)   :: float4a(7:8,23:42,-4:-2,0:20), float4b(2,20,3,21), float4c(2,21,3,21), float4d(2,20,3,21)
      REAL(KIND=C_DOUBLE)  :: double4a(7:8,23:42,-4:-2,0:21), double4b(2,20,3,22), double4c(2,20,3,21), double4d(2,20,3,22)
    
      result = .FALSE.
      result_acc = .TRUE.
    
      logical0a          = .TRUE.
      logical0b          = .TRUE.
      logical0d          = .FALSE.
      boolean1a(:)       = .FALSE.
      boolean1b(:)       = .FALSE.
      boolean1c(:)       = .FALSE.
      boolean1d(:)       = .FALSE.
      boolean1d(1)       = .TRUE.
      integer2a(:,:)     = 42
      integer2b(:,:)     = 42
      integer2c(:,:)     = 42
      integer2d(:,:)     = 42
      integer2d(5,9)     = 43
      longint3a(:,:,:)   = 42
      longint3b(:,:,:)   = 42
      longint3c(:,:,:)   = 42
      longint3d(:,:,:)   = 42
      longint3d(7,3,1)   = -42
      float4a(:,:,:,:)   = 109.23
      float4b(:,:,:,:)   = 109.23
      float4c(:,:,:,:)   = 109.23
      float4d(:,:,:,:)   = 109.23
      float4d(2,20,3,1)   = 109.231
      double4a(:,:,:,:)  = 109.23
      double4b(:,:,:,:)  = 109.23
      double4c(:,:,:,:)  = 109.23
      double4d(:,:,:,:)  = 109.23
      double4d(2,20,3,1)  = 109.229
      
      CALL ftg_set_serializer(dir, base_name, 'w')
      CALL ftg_write("logical0", logical0a)
      CALL ftg_write("boolean1", boolean1a, LBOUND(boolean1a), UBOUND(boolean1a))
      CALL ftg_write("integer2", integer2a, LBOUND(integer2a), UBOUND(integer2a))
      CALL ftg_write("longint3", longint3a, LBOUND(longint3a), UBOUND(longint3a))
      CALL ftg_write("float4", float4a, LBOUND(float4a), UBOUND(float4a))
      CALL ftg_write("double4", double4a, LBOUND(double4a), UBOUND(double4a))
      CALL ftg_destroy_serializer()      
      
      CALL ftg_set_serializer(dir, base_name, 'r')
      
      CALL ftg_compare("logical0", logical0a, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("boolean1", boolean1a, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("integer2", integer2a, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("longint3", longint3a, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("float4", float4a, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("double4", double4a, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      
      CALL ftg_compare("logical0", logical0b, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("boolean1", boolean1b, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("integer2", integer2b, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("longint3", longint3b, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("float4", float4b, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      CALL ftg_compare("double4", double4b, result, result_acc)
      @assertTrue(result)
      @assertTrue(result_acc)
      
      CALL ftg_compare("boolean1", boolean1c, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      CALL ftg_compare("integer2", integer2c, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      CALL ftg_compare("longint3", longint3c, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      CALL ftg_compare("float4", float4c, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      CALL ftg_compare("double4", double4c, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      
      CALL ftg_compare("logical0", logical0d, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      CALL ftg_compare("boolean1", boolean1d, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      CALL ftg_compare("integer2", integer2d, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      CALL ftg_compare("longint3", longint3d, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      CALL ftg_compare("float4", float4d, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      CALL ftg_compare("double4", double4d, result, result_acc)
      @assertFalse(result)
      @assertFalse(result_acc)
      
      CALL ftg_compare("logical0", logical0a, result, result_acc)
      @assertTrue(result)
      @assertFalse(result_acc)
      
      CALL ftg_destroy_serializer()      
    
    END SUBROUTINE testCompare
      
END MODULE ser_ftg_cmp_test
