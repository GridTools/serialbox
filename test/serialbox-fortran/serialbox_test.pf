MODULE serialbox_test
   
  USE ISO_FORTRAN_ENV
  USE pfunit_mod
  USE m_serialize
  
  IMPLICIT NONE
  
  PUBLIC 

  TYPE(t_savepoint)  :: savepoint
  
  CHARACTER(len=*), PARAMETER :: dir = 'sbdata'
  CHARACTER(len=*), PARAMETER :: savepoint_name = 'test'
  INTEGER, PARAMETER :: exp_size_scalar(4) = (/ 1, 0, 0, 0 /) 

CONTAINS
   
   FUNCTION exp_size(var_shape)
      INTEGER :: var_shape(:), exp_size(4)
      exp_size = RESHAPE(var_shape, (/ 4 /), (/ 0, 0, 0, 0 /))
   END FUNCTION exp_size

@Before
   SUBROUTINE mySetup()

      CALL fs_create_savepoint(savepoint_name, savepoint)
      
   END SUBROUTINE mySetup
   
@After
   SUBROUTINE myTearDown()

      CALL fs_destroy_savepoint(savepoint)
      
   END SUBROUTINE myTearDown
   
@Test
    SUBROUTINE testIntegerArrays()
    
      TYPE(t_serializer) :: serializer
      INTEGER :: w_testfield_i1(5), w_testfield_i2(4,3), w_testfield_i3(3,2,2), w_testfield_i4(2,2,2,2)
      INTEGER :: r_testfield_i1(5), r_testfield_i2(4,3), r_testfield_i3(3,2,2), r_testfield_i4(2,2,2,2)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_integer'
      
      w_testfield_i1 = (/ 0, 1, 2, 3, 4 /)
      w_testfield_i2 = RESHAPE((/ 0, 3, 2, 9, 1, 4, 7, 10, 2, 5, 8, 11 /), SHAPE(w_testfield_i2))
      w_testfield_i3 = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i3))
      w_testfield_i4 = RESHAPE((/ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 /), SHAPE(w_testfield_i4))
            
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i1", w_testfield_i1)
      CALL fs_write_field(serializer, savepoint, "testfield_i2", w_testfield_i2)
      CALL fs_write_field(serializer, savepoint, "testfield_i3", w_testfield_i3)
      CALL fs_write_field(serializer, savepoint, "testfield_i4", w_testfield_i4)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)
      @assertTrue(fs_field_exists(serializer, "testfield_i1"))
      @assertTrue(fs_field_exists(serializer, "testfield_i2"))
      @assertTrue(fs_field_exists(serializer, "testfield_i3"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4"))
      @assertEqual(exp_size(SHAPE(w_testfield_i1)), fs_get_size(serializer, "testfield_i1"))
      @assertEqual(exp_size(SHAPE(w_testfield_i2)), fs_get_size(serializer, "testfield_i2"))
      @assertEqual(exp_size(SHAPE(w_testfield_i3)), fs_get_size(serializer, "testfield_i3"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4)), fs_get_size(serializer, "testfield_i4"))
      CALL fs_read_field(serializer, savepoint, "testfield_i1", r_testfield_i1)
      CALL fs_read_field(serializer, savepoint, "testfield_i2", r_testfield_i2)
      CALL fs_read_field(serializer, savepoint, "testfield_i3", r_testfield_i3)
      CALL fs_read_field(serializer, savepoint, "testfield_i4", r_testfield_i4)
      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i1, r_testfield_i1)
      @assertEqual(w_testfield_i2, r_testfield_i2)
      @assertEqual(w_testfield_i3, r_testfield_i3)
      @assertEqual(w_testfield_i4, r_testfield_i4)
    
    END SUBROUTINE testIntegerArrays
   
@Test
    SUBROUTINE testLongArrays()
    
      TYPE(t_serializer) :: serializer
      INTEGER(KIND=8) :: w_testfield_long1(5), w_testfield_long2(4,3), w_testfield_long3(3,2,2), w_testfield_long4(2,2,2,2)
      INTEGER(KIND=8) :: r_testfield_long1(5), r_testfield_long2(4,3), r_testfield_long3(3,2,2), r_testfield_long4(2,2,2,2)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_long'
      
      w_testfield_long1 = (/ 0_8, 1_8, 2_8, 3_8, 999888777666555_8 /)
      w_testfield_long2 = RESHAPE((/ 0_8, 3_8, 2_8, 9223372036854775807_8, 1_8, 4_8, 7_8, 10_8, 2_8, 5_8, 8_8, 11_8 /), SHAPE(w_testfield_long2))
      w_testfield_long3 = RESHAPE((/ 0_8, 4_8, 8_8, 2_8, 6_8, 10_8, 1_8, 5_8, -9223372036854775807_8, 3_8, 7_8, 11_8 /), SHAPE(w_testfield_long3))
      w_testfield_long4 = RESHAPE((/ 0_8, 1_8, 2_8, 3_8, 4_8, 5_8, 6_8, 7_8, 2147483647_8, 2147483648_8, -2147483648_8, -2147483649_8, 12_8, 13_8, 14_8, 15_8 /), SHAPE(w_testfield_long4))
            
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_long1", w_testfield_long1)
      CALL fs_write_field(serializer, savepoint, "testfield_long2", w_testfield_long2)
      CALL fs_write_field(serializer, savepoint, "testfield_long3", w_testfield_long3)
      CALL fs_write_field(serializer, savepoint, "testfield_long4", w_testfield_long4)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)
      @assertTrue(fs_field_exists(serializer, "testfield_long1"))
      @assertTrue(fs_field_exists(serializer, "testfield_long2"))
      @assertTrue(fs_field_exists(serializer, "testfield_long3"))
      @assertTrue(fs_field_exists(serializer, "testfield_long4"))
      @assertEqual(exp_size(SHAPE(w_testfield_long1)), fs_get_size(serializer, "testfield_long1"))
      @assertEqual(exp_size(SHAPE(w_testfield_long2)), fs_get_size(serializer, "testfield_long2"))
      @assertEqual(exp_size(SHAPE(w_testfield_long3)), fs_get_size(serializer, "testfield_long3"))
      @assertEqual(exp_size(SHAPE(w_testfield_long4)), fs_get_size(serializer, "testfield_long4"))
      CALL fs_read_field(serializer, savepoint, "testfield_long1", r_testfield_long1)
      CALL fs_read_field(serializer, savepoint, "testfield_long2", r_testfield_long2)
      CALL fs_read_field(serializer, savepoint, "testfield_long3", r_testfield_long3)
      CALL fs_read_field(serializer, savepoint, "testfield_long4", r_testfield_long4)
      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_long1, r_testfield_long1)
      @assertEqual(w_testfield_long2, r_testfield_long2)
      @assertEqual(w_testfield_long3, r_testfield_long3)
      @assertEqual(w_testfield_long4, r_testfield_long4)
    
    END SUBROUTINE testLongArrays
   
@Test
    SUBROUTINE testLogicalArrays()
    
      TYPE(t_serializer) :: serializer
      LOGICAL :: w_testfield_l1(5), w_testfield_l2(4,3), w_testfield_l3(3,2,2), w_testfield_l4(2,2,2,2)
      LOGICAL :: r_testfield_l1(5), r_testfield_l2(4,3), r_testfield_l3(3,2,2), r_testfield_l4(2,2,2,2)
      INTEGER :: w_testfield_i2(4,3), w_testfield_i3(3,2,2), w_testfield_i4(2,2,2,2)
      INTEGER :: r_testfield_i2(4,3), r_testfield_i3(3,2,2), r_testfield_i4(2,2,2,2)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_logical'
      
      w_testfield_l1 = (/ .TRUE., .FALSE., .FALSE., .TRUE., .FALSE. /)
      w_testfield_l2 = RESHAPE((/ .TRUE., .FALSE., .FALSE., .TRUE., .FALSE., .TRUE., .FALSE., .FALSE., .TRUE., .FALSE., .TRUE., .FALSE. /), SHAPE(w_testfield_l2))
      w_testfield_l3 = RESHAPE((/ .TRUE., .FALSE., .FALSE., .TRUE., .FALSE., .TRUE., .FALSE., .FALSE., .TRUE., .FALSE., .TRUE., .FALSE. /), SHAPE(w_testfield_l3))
      w_testfield_l4 = RESHAPE((/ .TRUE., .FALSE., .FALSE., .TRUE., .FALSE., .TRUE., .FALSE., .FALSE., .TRUE., .FALSE., .TRUE., .FALSE., .TRUE., .FALSE., .FALSE., .TRUE., .FALSE., .TRUE., .FALSE., .FALSE., .TRUE., .FALSE., .TRUE. /), SHAPE(w_testfield_l4))
            
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_l1", w_testfield_l1)
      CALL fs_write_field(serializer, savepoint, "testfield_l2", w_testfield_l2)
      CALL fs_write_field(serializer, savepoint, "testfield_l3", w_testfield_l3)
      CALL fs_write_field(serializer, savepoint, "testfield_l4", w_testfield_l4)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)
      @assertTrue(fs_field_exists(serializer, "testfield_l1"))
      @assertTrue(fs_field_exists(serializer, "testfield_l2"))
      @assertTrue(fs_field_exists(serializer, "testfield_l3"))
      @assertTrue(fs_field_exists(serializer, "testfield_l4"))
      @assertEqual(exp_size(SHAPE(w_testfield_l1)), fs_get_size(serializer, "testfield_l1"))
      @assertEqual(exp_size(SHAPE(w_testfield_l2)), fs_get_size(serializer, "testfield_l2"))
      @assertEqual(exp_size(SHAPE(w_testfield_l3)), fs_get_size(serializer, "testfield_l3"))
      @assertEqual(exp_size(SHAPE(w_testfield_l4)), fs_get_size(serializer, "testfield_l4"))
      CALL fs_read_field(serializer, savepoint, "testfield_l1", r_testfield_l1)
      CALL fs_read_field(serializer, savepoint, "testfield_l2", r_testfield_l2)
      CALL fs_read_field(serializer, savepoint, "testfield_l3", r_testfield_l3)
      CALL fs_read_field(serializer, savepoint, "testfield_l4", r_testfield_l4)
      CALL fs_destroy_serializer(serializer)
      
      @assertEquivalent(w_testfield_l1, r_testfield_l1)
      
      !Convert to INTEGER since pFUnit doesn't support multi-dimensional LOGICAL arrays
      w_testfield_i2 = w_testfield_l2
      r_testfield_i2 = r_testfield_l2
      @assertEqual(w_testfield_i2, r_testfield_i2)
      w_testfield_i3 = w_testfield_l3
      r_testfield_i3 = r_testfield_l3
      @assertEqual(w_testfield_i3, r_testfield_i3)
      w_testfield_i4 = w_testfield_l4
      r_testfield_i4 = r_testfield_l4
      @assertEqual(w_testfield_i4, r_testfield_i4)
    
    END SUBROUTINE testLogicalArrays
   
@Test
    SUBROUTINE testScalars()
    
      TYPE(t_serializer) :: serializer
      INTEGER :: w_testfield_i0, r_testfield_i0
      INTEGER :: w_testfield_i1(1), r_testfield_i1(1)
      LOGICAL :: w_testfield_l0, r_testfield_l0
      LOGICAL :: w_testfield_l1(1), r_testfield_l1(1)
      INTEGER(8) :: w_testfield_long0, r_testfield_long0
      INTEGER(8) :: w_testfield_long1(1), r_testfield_long1(1)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_scalars'
      
      w_testfield_i0 = 42
      w_testfield_i1 = (/ 999 /)
      w_testfield_l0 = .TRUE.
      w_testfield_l1 = (/ .FALSE. /)
      w_testfield_long0 = 999888777666555_8
      w_testfield_long1 = (/ -1234567890123_8 /)
            
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i0", w_testfield_i0)
      CALL fs_write_field(serializer, savepoint, "testfield_i1", w_testfield_i1)
      CALL fs_write_field(serializer, savepoint, "testfield_l0", w_testfield_l0)
      CALL fs_write_field(serializer, savepoint, "testfield_l1", w_testfield_l1)
      CALL fs_write_field(serializer, savepoint, "testfield_long0", w_testfield_long0)
      CALL fs_write_field(serializer, savepoint, "testfield_long1", w_testfield_long1)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)
      
      @assertTrue(fs_field_exists(serializer, "testfield_i0"))
      @assertTrue(fs_field_exists(serializer, "testfield_i1"))
      @assertTrue(fs_field_exists(serializer, "testfield_l0"))
      @assertTrue(fs_field_exists(serializer, "testfield_l1"))
      @assertTrue(fs_field_exists(serializer, "testfield_long0"))
      @assertTrue(fs_field_exists(serializer, "testfield_long1"))
      
      @assertEqual(exp_size_scalar, fs_get_size(serializer, "testfield_i0"))
      @assertEqual(exp_size(SHAPE(w_testfield_i1)), fs_get_size(serializer, "testfield_i1"))
      @assertEqual(exp_size_scalar, fs_get_size(serializer, "testfield_l0"))
      @assertEqual(exp_size(SHAPE(w_testfield_l1)), fs_get_size(serializer, "testfield_l1"))
      @assertEqual(exp_size_scalar, fs_get_size(serializer, "testfield_long0"))
      @assertEqual(exp_size(SHAPE(w_testfield_long1)), fs_get_size(serializer, "testfield_long1"))
      
      CALL fs_read_field(serializer, savepoint, "testfield_i0", r_testfield_i0)
      CALL fs_read_field(serializer, savepoint, "testfield_i1", r_testfield_i1)
      CALL fs_read_field(serializer, savepoint, "testfield_l0", r_testfield_l0)
      CALL fs_read_field(serializer, savepoint, "testfield_l1", r_testfield_l1)
      CALL fs_read_field(serializer, savepoint, "testfield_long0", r_testfield_long0)
      CALL fs_read_field(serializer, savepoint, "testfield_long1", r_testfield_long1)
      
      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i0, r_testfield_i0)
      @assertEqual(w_testfield_i1, r_testfield_i1)
      @assertEquivalent(w_testfield_l0, r_testfield_l0)
      @assertEquivalent(w_testfield_l1, r_testfield_l1)
      @assertEqual(w_testfield_long0, r_testfield_long0)
      @assertEqual(w_testfield_long1, r_testfield_long1)
    
    END SUBROUTINE testScalars
   
@Test
    SUBROUTINE testRank_i2()
    
      TYPE(t_serializer) :: serializer
      
      INTEGER :: w_testfield_i2a(3,1), r_testfield_i2a(3,1)
      INTEGER :: w_testfield_i2b(1,3), r_testfield_i2b(1,3)
      INTEGER :: w_testfield_i2c(1,1), r_testfield_i2c(1,1)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_rank_2d'
      
      w_testfield_i2a = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i2a))
      w_testfield_i2b = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i2b))
      w_testfield_i2c = RESHAPE((/ 23 /), SHAPE(w_testfield_i2c))
      
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i2a_rank", w_testfield_i2a)
      CALL fs_write_field(serializer, savepoint, "testfield_i2b_rank", w_testfield_i2b)
      CALL fs_write_field(serializer, savepoint, "testfield_i2c_rank", w_testfield_i2c)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)

      @assertTrue(fs_field_exists(serializer, "testfield_i2a_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i2b_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i2c_rank"))
      
      @assertEqual(exp_size(SHAPE(w_testfield_i2a)), fs_get_size(serializer, "testfield_i2a_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i2b)), fs_get_size(serializer, "testfield_i2b_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i2c)), fs_get_size(serializer, "testfield_i2c_rank"))
      
      CALL fs_read_field(serializer, savepoint, "testfield_i2a_rank", r_testfield_i2a)
      CALL fs_read_field(serializer, savepoint, "testfield_i2b_rank", r_testfield_i2b)
      CALL fs_read_field(serializer, savepoint, "testfield_i2c_rank", r_testfield_i2c)

      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i2a, r_testfield_i2a)
      @assertEqual(w_testfield_i2b, r_testfield_i2b)
      @assertEqual(w_testfield_i2c, r_testfield_i2c)
    
    END SUBROUTINE testRank_i2
   
@Test
    SUBROUTINE testRank_i3()
    
      TYPE(t_serializer) :: serializer
      
      INTEGER :: w_testfield_i3a(3,1,4), r_testfield_i3a(3,1,4)
      INTEGER :: w_testfield_i3b(3,4,1), r_testfield_i3b(3,4,1)
      INTEGER :: w_testfield_i3c(3,1,1), r_testfield_i3c(3,1,1)
      INTEGER :: w_testfield_i3d(1,1,1), r_testfield_i3d(1,1,1)
      INTEGER :: w_testfield_i3e(1,1,3), r_testfield_i3e(1,1,3)
      INTEGER :: w_testfield_i3f(1,4,3), r_testfield_i3f(1,4,3)
      INTEGER :: w_testfield_i3g(1,3,1), r_testfield_i3g(1,3,1)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_rank_3d'
      
      w_testfield_i3a = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i3a))
      w_testfield_i3b = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i3b))
      w_testfield_i3c = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i3c))
      w_testfield_i3d = RESHAPE((/ 109 /), SHAPE(w_testfield_i3d))
      w_testfield_i3e = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i3e))
      w_testfield_i3f = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i3f))
      w_testfield_i3g = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i3g))
      
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i3a_rank", w_testfield_i3a)
      CALL fs_write_field(serializer, savepoint, "testfield_i3b_rank", w_testfield_i3b)
      CALL fs_write_field(serializer, savepoint, "testfield_i3c_rank", w_testfield_i3c)
      CALL fs_write_field(serializer, savepoint, "testfield_i3d_rank", w_testfield_i3d)
      CALL fs_write_field(serializer, savepoint, "testfield_i3e_rank", w_testfield_i3e)
      CALL fs_write_field(serializer, savepoint, "testfield_i3f_rank", w_testfield_i3f)
      CALL fs_write_field(serializer, savepoint, "testfield_i3g_rank", w_testfield_i3g)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)

      @assertTrue(fs_field_exists(serializer, "testfield_i3a_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i3b_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i3c_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i3d_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i3e_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i3f_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i3g_rank"))
      
      @assertEqual(exp_size(SHAPE(w_testfield_i3a)), fs_get_size(serializer, "testfield_i3a_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i3b)), fs_get_size(serializer, "testfield_i3b_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i3c)), fs_get_size(serializer, "testfield_i3c_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i3d)), fs_get_size(serializer, "testfield_i3d_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i3e)), fs_get_size(serializer, "testfield_i3e_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i3f)), fs_get_size(serializer, "testfield_i3f_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i3g)), fs_get_size(serializer, "testfield_i3g_rank"))
      
      CALL fs_read_field(serializer, savepoint, "testfield_i3a_rank", r_testfield_i3a)
      CALL fs_read_field(serializer, savepoint, "testfield_i3b_rank", r_testfield_i3b)
      CALL fs_read_field(serializer, savepoint, "testfield_i3c_rank", r_testfield_i3c)
      CALL fs_read_field(serializer, savepoint, "testfield_i3d_rank", r_testfield_i3d)
      CALL fs_read_field(serializer, savepoint, "testfield_i3e_rank", r_testfield_i3e)
      CALL fs_read_field(serializer, savepoint, "testfield_i3f_rank", r_testfield_i3f)
      CALL fs_read_field(serializer, savepoint, "testfield_i3g_rank", r_testfield_i3g)

      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i3a, r_testfield_i3a)
      @assertEqual(w_testfield_i3b, r_testfield_i3b)
      @assertEqual(w_testfield_i3c, r_testfield_i3c)
      @assertEqual(w_testfield_i3d, r_testfield_i3d)
      @assertEqual(w_testfield_i3e, r_testfield_i3e)
      @assertEqual(w_testfield_i3f, r_testfield_i3f)
      @assertEqual(w_testfield_i3g, r_testfield_i3g)
    
    END SUBROUTINE testRank_i3
   
@Test
    SUBROUTINE testRank_i4()
    
      TYPE(t_serializer) :: serializer
      
      INTEGER :: w_testfield_i4a(3,1,1,4), r_testfield_i4a(3,1,1,4)
      INTEGER :: w_testfield_i4b(3,2,2,1), r_testfield_i4b(3,2,2,1)
      INTEGER :: w_testfield_i4c(3,2,1,1), r_testfield_i4c(3,2,1,1)
      INTEGER :: w_testfield_i4d(3,1,1,1), r_testfield_i4d(3,1,1,1)
      INTEGER :: w_testfield_i4e(1,1,1,1), r_testfield_i4e(1,1,1,1)
      INTEGER :: w_testfield_i4f(1,1,1,3), r_testfield_i4f(1,1,1,3)
      INTEGER :: w_testfield_i4g(1,1,2,3), r_testfield_i4g(1,1,2,3)
      INTEGER :: w_testfield_i4h(1,3,2,2), r_testfield_i4h(1,3,2,2)
      
      INTEGER :: w_testfield_i4i(3,2,1,2), r_testfield_i4i(3,2,1,2)
      INTEGER :: w_testfield_i4j(3,1,2,2), r_testfield_i4j(3,1,2,2)
      INTEGER :: w_testfield_i4k(1,3,4,1), r_testfield_i4k(1,3,4,1)
      INTEGER :: w_testfield_i4l(1,3,1,1), r_testfield_i4l(1,3,1,1)
      INTEGER :: w_testfield_i4m(1,1,3,1), r_testfield_i4m(1,1,3,1)
      INTEGER :: w_testfield_i4n(1,3,1,4), r_testfield_i4n(1,3,1,4)
      INTEGER :: w_testfield_i4o(3,1,4,1), r_testfield_i4o(3,1,4,1)
      
      CHARACTER(len=*), PARAMETER :: base_name = 'test_rank_4d'
      
      w_testfield_i4a = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i4a))
      w_testfield_i4b = RESHAPE((/ 0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11 /), SHAPE(w_testfield_i4b))
      w_testfield_i4c = RESHAPE((/ 0, 4, 8, 1, 5, 9 /), SHAPE(w_testfield_i4c))
      w_testfield_i4d = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i4d))
      w_testfield_i4e = RESHAPE((/ 42 /), SHAPE(w_testfield_i4e))
      w_testfield_i4f = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i4f))
      w_testfield_i4g = RESHAPE((/ 0, 4, 8, 1, 5, 9 /), SHAPE(w_testfield_i4g))
      w_testfield_i4h = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i4h))
      w_testfield_i4i = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i4i))
      w_testfield_i4j = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i4j))
      w_testfield_i4k = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i4k))
      w_testfield_i4l = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i4l))
      w_testfield_i4m = RESHAPE((/ 0, 4, 8 /), SHAPE(w_testfield_i4m))
      w_testfield_i4n = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i4n))
      w_testfield_i4o = RESHAPE((/ 0, 4, 8, 2, 6, 10, 1, 5, 9, 3, 7, 11 /), SHAPE(w_testfield_i4o))
      
      CALL fs_create_serializer(dir, base_name, 'w', serializer)
      CALL fs_write_field(serializer, savepoint, "testfield_i4a_rank", w_testfield_i4a)
      CALL fs_write_field(serializer, savepoint, "testfield_i4b_rank", w_testfield_i4b)
      CALL fs_write_field(serializer, savepoint, "testfield_i4c_rank", w_testfield_i4c)
      CALL fs_write_field(serializer, savepoint, "testfield_i4d_rank", w_testfield_i4d)
      CALL fs_write_field(serializer, savepoint, "testfield_i4e_rank", w_testfield_i4e)
      CALL fs_write_field(serializer, savepoint, "testfield_i4f_rank", w_testfield_i4f)
      CALL fs_write_field(serializer, savepoint, "testfield_i4g_rank", w_testfield_i4g)
      CALL fs_write_field(serializer, savepoint, "testfield_i4h_rank", w_testfield_i4h)
      CALL fs_write_field(serializer, savepoint, "testfield_i4i_rank", w_testfield_i4i)
      CALL fs_write_field(serializer, savepoint, "testfield_i4j_rank", w_testfield_i4j)
      CALL fs_write_field(serializer, savepoint, "testfield_i4k_rank", w_testfield_i4k)
      CALL fs_write_field(serializer, savepoint, "testfield_i4l_rank", w_testfield_i4l)
      CALL fs_write_field(serializer, savepoint, "testfield_i4m_rank", w_testfield_i4m)
      CALL fs_write_field(serializer, savepoint, "testfield_i4n_rank", w_testfield_i4n)
      CALL fs_write_field(serializer, savepoint, "testfield_i4o_rank", w_testfield_i4o)
      CALL fs_destroy_serializer(serializer)
      
      CALL fs_create_serializer(dir, base_name, 'r', serializer)

      @assertTrue(fs_field_exists(serializer, "testfield_i4a_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4b_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4c_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4d_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4e_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4f_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4g_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4h_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4i_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4j_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4k_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4l_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4m_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4n_rank"))
      @assertTrue(fs_field_exists(serializer, "testfield_i4o_rank"))
      
      @assertEqual(exp_size(SHAPE(w_testfield_i4a)), fs_get_size(serializer, "testfield_i4a_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4b)), fs_get_size(serializer, "testfield_i4b_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4c)), fs_get_size(serializer, "testfield_i4c_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4d)), fs_get_size(serializer, "testfield_i4d_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4e)), fs_get_size(serializer, "testfield_i4e_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4f)), fs_get_size(serializer, "testfield_i4f_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4g)), fs_get_size(serializer, "testfield_i4g_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4h)), fs_get_size(serializer, "testfield_i4h_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4i)), fs_get_size(serializer, "testfield_i4i_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4j)), fs_get_size(serializer, "testfield_i4j_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4k)), fs_get_size(serializer, "testfield_i4k_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4l)), fs_get_size(serializer, "testfield_i4l_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4m)), fs_get_size(serializer, "testfield_i4m_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4n)), fs_get_size(serializer, "testfield_i4n_rank"))
      @assertEqual(exp_size(SHAPE(w_testfield_i4o)), fs_get_size(serializer, "testfield_i4o_rank"))

      CALL fs_read_field(serializer, savepoint, "testfield_i4a_rank", r_testfield_i4a)
      CALL fs_read_field(serializer, savepoint, "testfield_i4b_rank", r_testfield_i4b)
      CALL fs_read_field(serializer, savepoint, "testfield_i4c_rank", r_testfield_i4c)
      CALL fs_read_field(serializer, savepoint, "testfield_i4d_rank", r_testfield_i4d)
      CALL fs_read_field(serializer, savepoint, "testfield_i4e_rank", r_testfield_i4e)
      CALL fs_read_field(serializer, savepoint, "testfield_i4f_rank", r_testfield_i4f)
      CALL fs_read_field(serializer, savepoint, "testfield_i4g_rank", r_testfield_i4g)
      CALL fs_read_field(serializer, savepoint, "testfield_i4h_rank", r_testfield_i4h)
      CALL fs_read_field(serializer, savepoint, "testfield_i4i_rank", r_testfield_i4i)
      CALL fs_read_field(serializer, savepoint, "testfield_i4j_rank", r_testfield_i4j)
      CALL fs_read_field(serializer, savepoint, "testfield_i4k_rank", r_testfield_i4k)
      CALL fs_read_field(serializer, savepoint, "testfield_i4l_rank", r_testfield_i4l)
      CALL fs_read_field(serializer, savepoint, "testfield_i4m_rank", r_testfield_i4m)
      CALL fs_read_field(serializer, savepoint, "testfield_i4n_rank", r_testfield_i4n)
      CALL fs_read_field(serializer, savepoint, "testfield_i4o_rank", r_testfield_i4o)

      CALL fs_destroy_serializer(serializer)
      
      @assertEqual(w_testfield_i4a, r_testfield_i4a)
      @assertEqual(w_testfield_i4b, r_testfield_i4b)
      @assertEqual(w_testfield_i4c, r_testfield_i4c)
      @assertEqual(w_testfield_i4d, r_testfield_i4d)
      @assertEqual(w_testfield_i4e, r_testfield_i4e)
      @assertEqual(w_testfield_i4f, r_testfield_i4f)
      @assertEqual(w_testfield_i4g, r_testfield_i4g)
      @assertEqual(w_testfield_i4h, r_testfield_i4h)
      @assertEqual(w_testfield_i4i, r_testfield_i4i)
      @assertEqual(w_testfield_i4j, r_testfield_i4j)
      @assertEqual(w_testfield_i4k, r_testfield_i4k)
      @assertEqual(w_testfield_i4l, r_testfield_i4l)
      @assertEqual(w_testfield_i4m, r_testfield_i4m)
      @assertEqual(w_testfield_i4n, r_testfield_i4n)
      @assertEqual(w_testfield_i4o, r_testfield_i4o)
    
    END SUBROUTINE testRank_i4

END MODULE serialbox_test
